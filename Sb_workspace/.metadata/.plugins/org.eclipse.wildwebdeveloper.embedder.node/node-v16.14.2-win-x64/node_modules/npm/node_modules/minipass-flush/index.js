End', 'npm:load:display')
    process.env.COLOR = this.color ? '1' : '0'

    process.emit('time', 'npm:load:logFile')
    this.#logFile.load({
      dir: resolve(this.cache, '_logs'),
      logsMax: this.config.get('logs-max'),
    })
    log.verbose('logfile', this.#logFile.files[0])
    process.emit('timeEnd', 'npm:load:logFile')

    process.emit('time', 'npm:load:timers')
    this.#timers.load({
      dir: this.cache,
    })
    process.emit('timeEnd', 'npm:load:timers')

    process.emit('time', 'npm:load:configScope')
    const configScope = this.config.get('scope')
    if (configScope && !/^@/.test(configScope)) {
      this.config.set('scope', `@${configScope}`, this.config.find('scope'))
    }
    process.emit('timeEnd', 'npm:load:configScope')
  }

  get flatOptions () {
    const { flat } = this.config
    if (this.command) {
      flat.npmCommand = this.command
    }
    return flat
  }

  // color and logColor are a special derived values that takes into
  // consideration not only the c