n a future
    version of npm in favor of web-based login.
  `,
  description: `
    If \`--auth-type=sso\`, the type of SSO type to use.
  `,
  flatten,
})

define('strict-peer-deps', {
  default: false,
  type: Boolean,
  description: `
    If set to \`true\`, and \`--legacy-peer-deps\` is not set, then _any_
    conflicting \`peerDependencies\` will be treated as an install failure,
    even if npm could reasonably guess the appropriate resolution based on
    non-peer dependency relationships.

    By default, conflicting \`peerDependencies\` deep in the dependency graph
    will be resolved using the nearest non-peer dependency specification,
    even if doing so will result in some packages receiving a peer dependency
    outside the range set in their package's \`peerDependencies\` object.

    When such and override is performed, a warning is printed, explaining the
    conflict and the packages involved.  If \`--strict-peer-deps\` is set,
    then this warning is treated as a failure.
  `,
  flatten,
})

define('strict-ssl', {
  default: true,
  type: Boolean,
  description: `
    Whether or not to do SSL key validation when making requests to the
    registry via https.

    See also the \`ca\` config.
  `,
  flatten (key, obj, flatOptions) {
    flatOptions.strictSSL = obj[key]
  },
})

define('tag', {
  default: 'latest',
  type: String,
  description: `
    If you ask npm to install a package and don't tell it a specific version,
    then it will install the specified tag.

    Also the tag that is added to the package@version specified by the \`npm
    tag\` command, if no explicit tag is given.

    When used by the \`npm diff\` command, this is the tag used to fetch the
    tarball that will be compared with the local files by default.
  `,
  flatten (key, obj, flatOptions) {
    flatOptions.defaultTag = obj[key]
  },
})

define('tag-version-prefix', {
  default: 'v',
  type: String,
  description: `
    If set, alters the prefix used when tagging a new version when performing
    a version increment using  \`npm-version\`. To remove the prefix
    altogether, set it to the empty string: \`""\`.

    Because other tools may rely on the convention that npm version tags look
    like \`v1.0.0\`, _only use this property if it is absolutely necessary_.
    In particular, use care when overriding this setting for public packages.
  `,
  flatten,
})

define('timing', {
  default: false,
  type: Boolean,
  description: `
    If true, writes an \`npm-debug\` log to \`_logs\` and timing information
    to \`_timing.json\`, both in your cache, even if the command completes
    successfully.  \`_timing.json\` is a newline delimited list of JSON
    objects.

    You can quickly view it with this [json](https://npm.im/json) command
    line: \`npm exec -- json -g < ~/.npm/_timing.json\`.
  `,
})

define('tmp', {
  default: tmpdir(),
  defaultDescription: `
    The value returned by the Node.js \`os.tmpdir()\` method
    <https://nodejs.org/api/os.html#os_os_tmpdir>
  `,
  type: path,
  deprecated: `
    This setting is no longer used.  npm stores temporary files in a special
    location in the cache, and they are managed by
    [\`cacache\`](http://npm.im/cacache).
  `,
  description: `
    Historically, the location where temporary files were stored.  No longer
    relevant.
  `,
})

define('umask', {
  default: 0,
  type: Umask,
  description: `
    The "umask" value to use when setting the file creation mode on files and
    folders.

    Folders and executables are given a mode which is \`0o777\` masked
    against this value.  Other files are given a mode which is \`0o666\`
    masked against this value.

    Note that the underlying system will _also_ apply its own umask value to
    files and folders that are created, and npm does not circumvent this, but
    rather adds the \`--umask\` config to it.

    Thus, the effective default umask value on most POSIX systems is 0o22,
    meaning that folders and executables are created with a mode of 0o755 and
    other files are created with a mode of 0o644.
  `,
  flatten,
})

define('unicode', {
  default: unicode,
  defaultDescription: `
    false on windows, true on mac/unix systems with a unicode locale, as
    defined by the \`LC_ALL\`, \`LC_CTYPE\`, or \`LANG\` environment variables.
  `,
  type: Boolean,
  description: `
    When set to true, npm uses unicode characters in the tree output.  When
    false, it uses ascii characters instead of unicode glyphs.
  `,
})

define('update-notifier', {
  default: true,
  type: Boolean,
  description: `
    Set to false to suppress the update notification when using an older
    version of npm than the latest.
  `,
})

define('usage', {
  default: false,
  type: Boolean,
  short: ['?', 'H', 'h'],
  description: `
    Show short usage output about the command specified.
  `,
})

define('user-agent', {
  default: 'npm/{npm-version} ' +
           'node/{node-version} ' +
           '{platform} ' +
           '{arch} ' +
           'workspaces/{workspaces} ' +
           '{ci}',
  type: String,
  description: `
    Sets the User-Agent request header.  The following fields are replaced
    with their actual counterparts:

    * \`{npm-version}\` - The npm version in use
    * \`{node-version}\` - The Node.js version in use
    * \`{platform}\` - The value of \`process.platform\`
    * \`{arch}\` - The value of \`process.arch\`
    * \`{workspaces}\` - Set to \`true\` if the \`workspaces\` or \`workspace\`
      options are set.
    * \`{ci}\` - The value of the \`ci-name\` config, if set, prefixed with
      \`ci/\`, or an empty string if \`ci-name\` is empty.
  `,
  flatten (key, obj, flatOptions) {
    const value = obj[key]
    const ciName = obj['ci-name']
    let inWorkspaces = false
    if (obj.workspaces || obj.workspace && obj.workspace.length) {
      inWorkspaces = true
    }
    flatOptions.userAgent =
      value.replace(/\{node-version\}/gi, obj['node-version'])
        .replace(/\{npm-version\}/gi, obj['npm-version'])
        .replace(/\{platform\}/gi, pro