
define('prefix', {
  type: path,
  short: 'C',
  default: '',
  defaultDescription: `
    In global mode, the folder where the node executable is installed. In
    local mode, the nearest parent folder containing either a package.json
    file or a node_modules folder.
  `,
  description: `
    The location to install global items.  If set on the command line, then
    it forces non-global commands to run in the specified folder.
  `,
})

define('preid', {
  default: '',
  hint: 'prerelease-id',
  type: String,
  description: `
    The "prerelease identifier" to use as a prefix for the "prerelease" part
    of a semver. Like the \`rc\` in \`1.2.0-rc.8\`.
  `,
  flatten,
})

define('production', {
  default: null,
  type: [null, Boolean],
  deprecated: 'Use `--omit=dev` instead.',
  description: 'Alias for `--omit=dev`',
  flatten (key, obj, flatOptions) {
    definitions.omit.flatten('omit', obj, flatOptions)
  },
})

define('progress', {
  default: !ciName,
  defaultDescription: `
    \`true\` unless running in a known CI system
  `,
  type: Boolean,
  description: `
    When set to \`true\`, npm will display a progress bar during time
    intensive operations, if \`process.stderr\` is a TTY.

    Set to \`false\` to suppress the progress bar.
  `,
  flatten (key, obj, flatOptions) {
    flatOptions.progress = !obj.progress ? false
      : !!process.stderr.isTTY && process.env.TERM !== 'dumb'
  },
})

define('proxy', {
  default: null,
  type: [null, false, url], // allow proxy to be disabled explicitly
  description: `
    A proxy to use for outgoing http requests. If the \`HTTP_PROXY\` or
    \`http_proxy\` environment variables are set, proxy settings will be
    honored by the underlying \`request\` library.
  `,
  flatten,
})

define('read-only', {
  default: false,
  type: Boolean,
  description: `
    This is used to mark a token as unable to publish when configuring
    limited access tokens with the \`npm token create\` command.
  `,
  flatten,
})

define('rebuild-bundle', {
  default: true,
  type: Boolean,
  description: `
    Rebuild bundled dependencies after installation.
  `,
  flatten,
})

define('registry', {
  default: 'https://registry.npmjs.org/',
  type: url,
  description: `
    The base URL of the npm registry.
  `,
  flatten,
})

define('save', {
  default: true,
  defaultDescription: `\`true\` unless when using \`npm update\` or
  \`npm dedupe\` where it defaults to \`false\``,
  usage: '-S|--save|--no-save|--save-prod|--save-dev|--save-optional|--save-peer|--save-bundle',
  type: Boolean,
  short: 'S',
  description: `
    Save installed packages to a \`package.json\` file as dependencies.

    When used with the \`npm rm\` command, removes the dependency from
    \`package.json\`.

    Will also prevent writing to \`package-lock.json\` if set to \`false\`.
  `,
  flatten,
})

define('save-bundle', {
  default: false,
  type: Boolean,
  short: 'B',
  description: `
    If a package would be saved at install time by the use of \`--save\`,
    \`--save-dev\`, or \`--save-optional\`, then also put it in the
    \`bundleDependencies\` list.

    Ignored if \`--save-peer\` is set, since peerDependencies cannot be bundled.
  `,
  flatten (key, obj, flatOptions) {
    // XXX update arborist to just ignore it if resulting saveType is peer
    // otherwise this won't have the expected effect:
    //
    // npm config set save-peer true
    