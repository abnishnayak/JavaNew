const path = require('path')

const libaccess = require('libnpmaccess')
const readPackageJson = require('read-package-json-fast')

const log = require('../utils/log-shim.js')
const otplease = require('../utils/otplease.js')
const getIdentity = require('../utils/get-identity.js')
const BaseCommand = require('../base-command.js')

const subcommands = [
  'public',
  'restricted',
  'grant',
  'revoke',
  'ls-packages',
  'ls-collaborators',
  'edit',
  '2fa-required',
  '2fa-not-required',
]

class Access extends BaseCommand {
  static description = 'Set access level on published packages'
  static name = 'access'
  static params = [
    'registry',
    'otp',
  ]

  static usage = [
    'public [<package>]',
    'restricted [<package>]',
    'grant <read-only|read-write> <scope:team> [<package>]',
    'revoke <scope:team> [<package>]',
    '2fa-required [<package>]',
    '2fa-not-required [<package>]',
    'ls-packages [<user>|<scope>|<scope:team>]',
    'ls-collaborators [<package> [<user>]]',
    'edit [<package>]',
  ]

  async completion (opts) {
    const argv = opts.conf.argv.remain
    if (argv.length === 2) {
      return subcommands
    }

    switch (argv[2]) {
      case 'grant':
        if (argv.length === 3) {
          return ['read-only', 'read-write']
        } else {
          return []
        }

      case 'public':
      case 'restricted':
      case 'ls-packages':
      case 'ls-collaborators':
      case 'edit':
      case '2fa-required':
      case '2fa-not-required':
      case 'revoke':
        return []
      default:
        throw new Error(argv[2] + ' not recognized')
    }
  }

  async exec ([cmd, ...args]) {
    if (!cmd) {
      throw this.usageError('Subcommand is required.')
    }

    if (!subcommands.includes(cmd) || !this[cmd]) {
      throw this.usageError(`${cmd} is not a recognized subcommand.`)
    }

    return this[cmd](args, {
      ...this.npm.flatOptions,
      log,
    })
  }

  public ([pkg], opts