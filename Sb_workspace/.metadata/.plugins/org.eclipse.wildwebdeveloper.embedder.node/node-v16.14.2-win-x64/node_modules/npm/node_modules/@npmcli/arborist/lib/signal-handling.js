  `,
})

define('init.license', {
  default: 'ISC',
  type: String,
  deprecated: `
    Use \`--init-license\` instead.
  `,
  description: `
    Alias for \`--init-license\`
  `,
})

define('init.module', {
  default: '~/.npm-init.js',
  type: path,
  deprecated: `
    Use \`--init-module\` instead.
  `,
  description: `
    Alias for \`--init-module\`
  `,
})

define('init.version', {
  default: '1.0.0',
  type: semver,
  deprecated: `
    Use \`--init-version\` instead.
  `,
  description: `
    Alias for \`--init-version\`
  `,
})

define('json', {
  default: false,
  type: Boolean,
  description: `
    Whether or not to output JSON data, rather than the normal output.

    * In \`npm pkg set\` it enables parsing set values with JSON.parse()
    before saving them to your \`package.json\`.

    Not supported by all npm commands.
  `,
  flatten,
})

define('key', {
  default: null,
  type: [null, String],
  description: `
    A client key to pass when accessing the registry.  Values should be in
    PEM format with newlines replaced by the string "\\n". For example:

    \`\`\`ini
    key="-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----"
    \`\`\`

    It is _not_ the path to a key file (and there is no "keyfile" option).
  `,
  flatten,
})

define('legacy-bundling', {
  default: false,
  type: Boolean,
  description: `
    Causes npm to install the package such that versions of npm prior to 1.4,
    such as the one included with node 0.8, can install the package.  This
    eliminates all automatic deduping. If used with \`global-style\` this
    option will be preferred.
  `,
  flatten,
})

define('legacy-peer-deps', {
  default: false,
  type: Boolean,
  description: `
    Causes npm to completely ignore \`peerDependencies\` when building a
    package tree, as in npm versions 3 through 6.

    If a package cannot be installed because of overly strict
    \`peerDependencies\` that collide, it provides a way to move forward
    resolving the situation.

    This differs from \`--omit=peer\`, in that \`--omit=peer\` will avoid
    unpacking \`peerDependencies\` on disk, but will still design a tree such
    tha