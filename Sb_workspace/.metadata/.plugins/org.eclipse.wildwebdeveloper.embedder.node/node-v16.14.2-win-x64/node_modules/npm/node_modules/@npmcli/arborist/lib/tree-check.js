.json file as \`devDependencies\`.
  `,
  flatten (key, obj, flatOptions) {
    if (!obj[key]) {
      if (flatOptions.saveType === 'dev') {
        delete flatOptions.saveType
      }
      return
    }

    flatOptions.saveType = 'dev'
  },
})

define('save-exact', {
  default: false,
  type: Boolean,
  short: 'E',
  description: `
    Dependencies saved to package.json will be configured with an exact
    version rather than using npm's default semver range operator.
  `,
  flatten (key, obj, flatOptions) {
    // just call the save-prefix flattener, it reads from obj['save-exact']
    definitions['save-prefix'].flatten('save-prefix', obj, flatOptions)
  },
})

define('save-optional', {
  default: false,
  type: Boolean,
  short: 'O',
  description: `
    Save installed packages to a package.json file as
    \`optionalDependencies\`.
  `,
  flatten (key, obj, flatOptions) {
    if (!obj[key]) {
      if (flatOptions.saveType === 'optional') {
        delete flatOptions.saveType
      } else if (flatOptions.saveType === 'peerOptional') {
        flatOptions.saveType = 'peer'
      }
      return
    }

    if (flatOptions.saveType === 'peerOptional') {
      return
    }

    if (flatOptions.saveType === 'peer') {
      flatOptions.saveType = 'peerOptional'
    } else {
      flatOptions.saveType = 'optional'
    }
  },
})

define('save-peer', {
  default: false,
  type: Boolean,
  description: `
    Save installed packages to a package.json file as \`peerDependencies\`
  `,
  flatten (key, obj, flatOptions) {
    if (!obj[key]) {
      if (flatOptions.saveType === 'peer') {
        delete flatOptions.saveType
      } else if (flatOptions.saveType === 'peerOptional') {
        flatOptions.saveType = 'optional'
      }
      return
    }

    if (flatOptions.saveType === 'peerOptional') {
      return
    }

    if (flatOptions.saveType === 'optional') {
      flatOptions.saveType = 'peerOptional'
    } else {
      flatOptions.saveType = 'peer'
    }
  },
})

define('save-prefix', {
  default: '^',
  type: String,
  description: `
    Configure how versions of packages installed to a package.json file via
    \`--save\` or \`--save-dev\` get prefixed.

    For example if a package has version \`1.2.3\`, by default its version is
    set to \`^1.2.3\` which allows minor upgrades for that package, but after
    \`npm config set save-prefix='~'\` it would be set to \`~1.2.3\` which
    only allows patch upgrades.
  `,
  flatten (key, obj, flatOptions) {
    flatOptions.savePrefix = obj['save-exact'] ? '' : obj['save-prefix']
    obj['save-prefix'] = flatOptions.savePrefix
  },
})

define('save-prod', {
  default: false,
  type: Boolean,
  short: 'P',
  description: `
    Save installed packages into \`dependencies\` specifically. This is
    useful if a package already exists in \`devDependencies\` or
    \`optionalDependencies\`, but you want to move it to be a non-optional
    production dependency.

    This is the default behavior if \`--save\` is true, and neither
    \`--save-dev\` or \`--save-optional\` are true.
  `,
  flatten (key, obj, flatOptions) {
    if (!obj[key]) {
      if (flatOptions.saveType === 'prod') {
        delete flatOptions.saveType
      }
      return
    }

    flatOptions.saveType = 'prod'
  },
})

define('scope', {
  default: '',
  defaultDescription: `
    the scope of the current project, if any, or ""
  `,
  type: String,
  hint: '<@scope>',
  description: `
    Associate an operation with a scope for a scoped registry.

    Useful when logging in to or out of a private registry:

    \`\`\`
    # log in, linking the scope to the custom registry
    npm login --scope=@mycorp --registry=https://registry.mycorp.com

    # log out, removing the link and the auth token
    npm logout --scope=@mycorp
    \`\`\`

    This will cause \`@mycorp\` to be mapped to the registry for future
    installation of packages specified according to the pattern
    \`@mycorp/package\`.

    This will also cause \`npm init\` to create a scoped package.

    \`\`\`
    # accept all defaults, and create a package named "@foo/whatever