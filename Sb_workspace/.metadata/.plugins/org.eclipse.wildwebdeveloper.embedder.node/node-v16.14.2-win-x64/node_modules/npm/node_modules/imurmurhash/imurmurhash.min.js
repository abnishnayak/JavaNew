 and handled as if it was a `.npmignore` file with `!` prepended to
all of the globs in the `files` list.  In order to include children of a
directory listed in `files`, they would _also_ have `/**` appended to them.

This is tricky to explain, but is a significant improvement over the
previous (v1) implementation used in npm 6 and below, with the following
beneficial properties:

- If you have `{"files":["lib"]}` in `package.json`, then the walker will
  still ignore files such as `lib/.DS_Store` and `lib/.foo.swp`.  The
  previous implementation would include these files, as they'd be matched
  by the computed `!lib/**` ignore rule.
- If you have `{"files":["lib/a.js","lib/b.js"]}` in `package.json`, and a
  `lib/.npmignore` containing `a.js`, then the walker will still include
  the two files indicated in `package.json`, and ignore the
  `lib/.npmignore` file.  The previous implementation would mark these
  files for inclusion, but then _exclude_ them when it came to the nested
  `.npmignore` file.  (Ignore file semantics dictate that a "closer" ignore
  file always takes precedence.)
- A file in `lib/pkg-template/package.json` will be included, and its
  `files` list will not have any bearing on other files being included or
  skipped.  When treating `package.json` as just Yet Another ignore file,
  this was not the case, leading to difficulty for modules that aim to
  initialize a project.

In general, this walk should work as a reasonable developer would expect.
Matching human expectation is tricky business, and if you find cases where
it violates those expectations, [please let us
know](https://github.com/npm/npm-packlist/issues).

## API

Same API as [ignore-walk](http://npm.im/ignore-walk), just hard-coded
file list and rule sets.

The `Walker` and `WalkerSync` classes take a `bundled` argument, which
is a list of package names 