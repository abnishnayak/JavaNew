r to generate a "man" array by
walking the folder.</p>
<h3 id="repository">repository</h3>
<p>Specify the place where your code lives. This is helpful for people who
want to contribute.  If the git repo is on GitHub, then the <code>npm docs</code>
command will be able to find you.</p>
<p>Do it like this:</p>
<pre lang="json"><code>{
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/cli.git"
  }
}
</code></pre>
<p>The URL should be a publicly available (perhaps read-only) url that can be
handed directly to a VCS program without any modification.  It should not
be a url to an html project page that you put in your browser.  It's for
computers.</p>
<p>For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the
same shortcut syntax you use for <code>npm install</code>:</p>
<pre lang="json"><code>{
  "repository": "npm/npm",

  "repository": "github:user/repo",

  "repository": "gist:11081aaa281",

  "repository": "bitbucket:user/repo",

  "repository": "gitlab:user/repo"
}
</code></pre>
<p>If the <code>package.json</code> for your package is not in the root directory (for
example if it is part of a monorepo), you can specify the directory in
which it lives:</p>
<pre lang="json"><code>{
  "repository": {
    "type": "git",
    "url": "https://github.com/facebook/react.git",
    "directory": "packages/react-dom"
  }
}
</code></pre>
<h3 id="scripts">scripts</h3>
<p>The "scripts" property is a dictionary containing script commands that are
run at various times in the lifecycle of your package.  The key is the
lifecycle event, and the value is the command to run at that point.</p>
<p>See <a href="../using-npm/scripts.html"><code>scripts</code></a> to find out more about writing package
scripts.</p>
<h3 id="config">config</h3>
<p>A "config" object can be used to set configuration parameters used in
package scripts that persist across upgrades.  For instance, if a package
had the following:</p>
<pre lang="json"><code>{
  "name": "foo",
  "config": {
    "port": "8080"
  }
}
</code></pre>
<p>It could also have a "start" command that referenced the
<code>npm_package_config_port</code> environment variable.</p>
<h3 id="dependencies">dependencies</h3>
<p>Dependencies are specified in a simple object that maps a package name to a
version range. The version range is a string which has one or more
space-separated descriptors.  Dependencies can also be identified with a
tarball or git URL.</p>
<p><strong>Please do not put test harnesses or transpilers or other "development"
time tools in your <code>dependencies</code> object.</strong>  See <code>devDependencies</code>, below.</p>
<p>See <a href="https://github.com/npm/node-semver#versions">semver</a> for more details about specifying version ranges.</p>
<ul>
<li><code>version</code> Must match <code>version</code> exactly</li>
<li><code>&gt;version</code> Must be greater than <code>version</code></li>
<li><code>&gt;=version</code> etc</li>
<li><code>&lt;version</code></li>
<li><code>&lt;=version</code></li>
<li><code>~version</code> "Approximately equivalent to version"  See
<a href="https://github.com/npm/node-semver#versions">semver</a></li>
<li><code>^version</code> "Compatible with version"  See <a href="https://github.com/npm/node-semver#versions">semver</a></li>
<li><code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li>
<li><code>http://...</code> See 'URLs as Dependencies' below</li>
<li><code>*</code> Matches any version</li>
<li><code>""</code> (just an empty string) Same as <code>*</code></li>
<li><code>version1 - version2</code> Same as <code>&gt;=version1 &lt;=version2</code>.</li>
<li><code>range1 || range2</code> Passes if either range1 or range2 are satisfied.</li>
<li><code>git.