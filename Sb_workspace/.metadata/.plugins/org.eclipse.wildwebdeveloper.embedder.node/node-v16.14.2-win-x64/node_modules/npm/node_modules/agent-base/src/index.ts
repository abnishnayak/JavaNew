d.
         * If relative, it is relative to the SourceMap. This parameter is needed when
         * the two SourceMaps aren't in the same directory, and the SourceMap to be
         * applied contains relative source paths. If so, those relative source paths
         * need to be rewritten relative to the SourceMap.
         * If omitted, it is assumed that both SourceMaps are in the same directory;
         * thus, not needing any rewriting (Supplying '.' has the same effect).
         */
        applySourceMap(
            sourceMapConsumer: mozilla.SourceMapConsumer,
            sourceFile?: string,
            sourceMapPath?: string
        ): void;
        /**
         * Renders the source map being generated to JSON.
         */
        toJSON: () => mozilla.RawSourceMap;
        /**
         * Renders the source map being generated to a string.
         */
        toString: () => string;
    }
    interface ResultMessage {
        type: string;
        text?: string;
        plugin?: string;
        browsers?: string[];
    }
    /**
     * Represents a plugin warning. It can be created using Result#warn().
     */
    interface Warning {
        /**
         * @returns Error position, message.
         */
        toString(): string;
        /**
         * Contains the warning message.
         */
        text: string;
        /**
         * Contains the name of the plugin that created this warning. When you
         * call Result#warn(), it will fill this property automatically.
         */
        plugin: string;
        /**
         * The CSS node that caused the warning.
         */
        node: Node;
        /**
         * The line in the input file with this warning's source.
         */
        line: number;
        /**
         * Column in the input file with this warning's source.
         */
        column: number;
    }
    interface WarningOptions extends ResultOptions {
        /**
         * A word inside a node's string that should be highlighted as source
         * of warning.
         */
        word?: string;
        /**
         * The index inside a node's string that should be highlighted as
         * source of warning.
         */
        index?: number;
    }
    /**
     * The CSS parser throws this error for broken CSS.
     */
    interface CssSyntaxError extends InputOrigin {
        name: string;
        /**
         * @returns Error position, message and source code of broken part.
         */
        toString(): string;
        /**
         * @param color Whether arrow should be colored red by terminal color codes.
         * By default, PostCSS will use process.stdout.isTTY and
         * process.env.NODE_DISABLE_COLORS.
         * @returns A few lines of CSS source that caused the error. If CSS has
         * input source map without sourceContent this method will return an empty
         * string.
         */
        showSourceCode(color?: boolean): string;
        /**
         * Contains full error text in the GNU error format.
         */
        message: string;
        /**
         * Contains only the error description.
         */
        reason: string;
        /**
         * Contains the PostCSS plugin name if the error didn't come from the
         * CSS parser.
         */
        plugin?: string;
        input?: InputOrigin;
    }
    interface InputOrigin {
        /**
         * If parser's from option is set, contains the absolute path to the
         * broken file. PostCSS will use the input source map to detect the
         * original error location. If you wrote a Sass file, then compiled it
         * to CSS and parsed it with PostCSS, PostCSS will show the original
         * position in the Sass file. If you need the position in the PostCSS
         * input (e.g., to debug the previous compiler), use error.input.file.
         */
        file?: string;
        /**
         * Contains the source line of the error. PostCSS will use the input
         * source map to detect the original error location. If you wrote a Sass
         * file, then compiled it to CSS and parsed it with PostCSS, PostCSS
         * will show the original position in the Sass file. If you need the
         * position in the PostCSS input (e.g., to debug the previous
         * compiler), use error.input.line.
         */
        line?: number;
        /**
         * Contains the source column of the error. PostCSS will use input
         * source map to detect the original error location. If you wrote a
         * Sass file, then compiled it to CSS and parsed it with PostCSS,
         * PostCSS will show the original position in the Sass file. If you
         * need the position in the PostCSS input (e.g., to debug the
         * previous compiler), use error.input.column.
         */
        column?: number;
        /**
         * Contains the source code of the broken file. PostCSS will use the
         * input source map to detect the original error location. If you wrote
         * a Sass file, then compiled it to CSS and parsed it with PostCSS,
         * PostCSS will show the original position in the Sass file. If you need
         * the position in the PostCSS input (e.g., to debug the previous
         * compiler), use error.input.source.
         */
        source?: string;
    }
    export class PreviousMap {
        private inline;
        annotation: string;
        root: string;
        private consumerCache;
        text: string;
        file: string;
        constructor(css: any, opts: any);
        consumer(): mozilla.SourceMapConsumer;
        withContent(): boolean;
        startWith(string: string, start: string): boolean;
        loadAnnotation(css: string): void;
        decodeInline(text: string): string;
        loadMap(
            file: any,
            prev: string | Function | mozilla.SourceMapConsumer | mozilla.SourceMapGenerator | mozilla.RawSourceMap
        ): string;
        isMap(map: any): boolean;
    }
    /**
     * Represents the source CSS.
     */
    interface Input {
        /**
         * The absolute path to the CSS source file defined with the "from" option.
         */
        file: string;
        /**
         * The unique ID of the CSS source. Used if "from" option is not provided
         * (because PostCSS does not know the file path).
         */
        id: string;
        /**
         * The CSS source identifier. Contains input.file if the user set the
         * "from" option, or input.id if they did not.
         */
        from: string;
        /**
         * Represents the input source map passed from a compilation step before
         * PostCSS (e.g., from the Sass compiler).
         */
        map: PreviousMap;
        /**
         * Reads the input source map.
         * @returns A symbol position in the input source (e.g., in a Sass file
         * that was compiled to CSS before being passed to PostCSS):
         */
        origin(line: number, column: number): InputOrigin;
    }
    type ChildNode = AtRule | Rule | Declaration | Comment;
    type Node = Root | ChildNode;
    interface NodeBase {
        /**
         * Returns the input source of the node. The property is used in source
         * map generation. If you create a node manually
         * (e.g., with postcss.decl() ), that node will not have a source
         * property and will be absent from the source map. For this reason, the
         * plugin developer should consider cloning nodes to create new ones
         * (in which case the new node's source will reference the original,
         * cloned node) or setting the source property manually.
         */
        source: NodeSource;
        /**
         * Contains information to generate byte-to-byte equal node string as it
         * was in origin input.
         */
        raws: NodeRaws;
        /**
         * @returns A CSS string representing the node.
         */
        toString(): string;
        /**
         * This method produces very useful error messages. If present, an input
         * source map will be used to get the original position of the source, even
         * from a previous compilation step (e.g., from Sass compilation).
         * @returns The original position of the node in the source, showing line
         * and column numbers and also a small excerpt to facilitate debugging.
         */
        error(
            /**
             * Error description.
             */
            message: string, options?: NodeErrorOptions): CssSyntaxError;
        /**
         * Creates an instance of Warning and adds it to messages. This method is
         * provided as a convenience wrapper for Result#warn.
         * Note that `opts.node` is automatically passed to Result#warn for you.
         * @param result The result that will receive the warning.
         * @param text Warning message. It will be used in the `text` property of
         * the message object.
         * @param opts Properties to assign to the message object.
         */
        warn(result: Result, text: string, opts?: WarningOptions): void;
        /**
         * @returns The next child of the node's parent; or, returns undefined if
         * the current node is the last child.
         */
        next(): ChildNode | void;
        /**
         * @returns The previous child of the node's pa