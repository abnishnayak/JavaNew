   : this.specs;
        const installLocations = [];
        for (const request of specs) {
            let spec;
            if (typeof request === `undefined`) {
                const lookup = await _specUtils__WEBPACK_IMPORTED_MODULE_2__.loadSpec(this.context.cwd);
                switch (lookup.type) {
                    case `NoProject`:
                        throw new clipanion__WEBPACK_IMPORTED_MODULE_3__.UsageError(`Couldn't find a project in the local directory - please explicit the package manager to pack, or run this command from a valid project`);
                    case `NoSpec`:
                        throw new clipanion__WEBPACK_IMPORTED_MODULE_3__.UsageError(`The local project doesn't feature a 'packageManager' field - please explicit the package manager to pack, or update the manifest to reference it`);
                    default: {
                        spec = lookup.spec;
                    }
                }
            }
            else {
                spec = typeof request === `string`
                    ? _specUtils__WEBPACK_IMPORTED_MODULE_2__.parseSpec(request, `CLI arguments`)
                    : request;
            }
            const resolved = await this.context.engine.resolveDescriptor(spec);
            if (resolved === null)
                throw new clipanion__WEBPACK_IMPORTED_MODULE_3__.UsageError(`Failed to successfully resolve '${spec.range}' to a valid ${spec.name} release`);
            if (!this.json) {
                if (this.activate) {
                    this.context.stdout.write(`Preparing ${spec.name}@${spec.range} for immediate activation...\n`);
                }
                else {
                    this.co